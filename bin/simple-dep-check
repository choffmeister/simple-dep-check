#!/usr/bin/env node

const { difference, flatten, orderBy, sortedUniq } = require('lodash')
const path = require('path')
const yargs = require('yargs')
const { globAsync, readFileAsync } = require('../src/fileSystemAsync')
const matchers = require('../src/matchers')

const cli = yargs
  .option('f', { alias: 'projectFolder', type: 'string' })
  .option('s', { alias: 'sourcesPattern', type: 'string' })
  .coerce('f', path.resolve)
  .demandOption(['f', 's'])
  .strict()

async function run({ projectFolder, sourcesPattern }) {
  console.log(`Project folder: ${projectFolder}\n`)
  console.log(`Sources pattern: ${sourcesPattern}\n`)

  const packageJson = JSON.parse(await readFileAsync(path.join(projectFolder, 'package.json')))
  const files = await globAsync(sourcesPattern, { cwd: projectFolder })

  console.log(`Matched source files: ${files.length}\n`)

  const imports = flatten(
    await Promise.all(
      files.map(async file => {
        const fileExtension = path.extname(file)
        const content = await readFileAsync(path.join(projectFolder, file))
        const lines = content.replace('\r\n', '\n').split('\n')
        const importMatches = lines
          .map(line =>
            matchers
              .filter(matcher => matcher.extensions.indexOf(fileExtension) >= 0)
              .reduce((match, matcher) => match || line.match(matcher.regex), null)
          )
          .filter(match => !!match)
        return importMatches.map(match => ({
          file,
          import: match[1],
        }))
      })
    )
  )

  const usedImports = sortedUniq(
    orderBy(
      imports.filter(i => i.import.match(/^[^\.\/]/)).map(i => {
        if (i.import[0] === '@') {
          return i.import.match(/^(@(?:[^\/]+)\/(?:[^\/]+))/)[1]
        } else {
          return i.import.match(/^([^\/]+)/)[1]
        }
      })
    )
  )

  const dependencies = Object.keys(packageJson.dependencies || {})
  const unusedDependencies = difference(dependencies, usedImports)
  const devDependencies = Object.keys(packageJson.devDependencies || {})
  const unusedDevDependencies = difference(devDependencies, usedImports)

  console.log('Unused dependencies:')
  unusedDependencies
    .filter(dep => {
      return true
    })
    .forEach(dep => console.log(`- ${dep}`))
  console.log()

  console.log('Unused dev dependencies:')
  unusedDevDependencies
    .filter(dep => {
      const match = dep.match(/^@types\/(.*)$/)
      if (match) {
        return unusedDependencies.indexOf(match[1]) >= 0
      } else {
        return true
      }
    })
    .forEach(dep => console.log(`- ${dep}`))
  console.log()
}

run(cli.argv).catch(err => {
  console.error(err)
  process.exit(1)
})
